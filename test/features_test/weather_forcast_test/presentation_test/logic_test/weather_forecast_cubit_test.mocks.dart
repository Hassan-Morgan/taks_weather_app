// Mocks generated by Mockito 5.1.0 from annotations
// in taqs/test/features_test/weather_forcast_test/presentation_test/logic_test/weather_forecast_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:location/location.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:taqs/core/errors/failures.dart' as _i6;
import 'package:taqs/core/utils/location_services/get_current_location.dart'
    as _i8;
import 'package:taqs/features/weather_forecast/domain/entities/weather_entity.dart'
    as _i7;
import 'package:taqs/features/weather_forecast/domain/repositories/weather_forecast_repositories.dart'
    as _i2;
import 'package:taqs/features/weather_forecast/domain/use_cases/get_weather_forecast_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWeatherForecastRepository_0 extends _i1.Fake
    implements _i2.WeatherForecastRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetWeatherForecastUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherForecastUseCase extends _i1.Mock
    implements _i4.GetWeatherForecastUseCase {
  MockGetWeatherForecastUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherForecastRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeWeatherForecastRepository_0())
          as _i2.WeatherForecastRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.WeatherEntity>> call(
          _i4.GetWeatherForecastParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i7.WeatherEntity>>.value(
              _FakeEither_1<_i6.Failure, _i7.WeatherEntity>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.WeatherEntity>>);
}

/// A class which mocks [LocationServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationServices extends _i1.Mock implements _i8.LocationServices {
  MockLocationServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.LocationData>> getCurrentLocation() =>
      (super.noSuchMethod(Invocation.method(#getCurrentLocation, []),
          returnValue: Future<_i3.Either<_i6.Failure, _i9.LocationData>>.value(
              _FakeEither_1<_i6.Failure, _i9.LocationData>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i9.LocationData>>);
}
