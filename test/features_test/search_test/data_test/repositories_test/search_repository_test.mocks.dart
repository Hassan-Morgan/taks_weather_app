// Mocks generated by Mockito 5.1.0 from annotations
// in taqs/test/features_test/search_test/data_test/repositories_test/search_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:taqs/core/utils/network_info/network_info.dart' as _i6;
import 'package:taqs/features/search/data/data_sources/search_remote_datasource.dart'
    as _i3;
import 'package:taqs/features/search/data/models/search_model.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [SearchRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRemoteDatasource extends _i1.Mock
    implements _i3.SearchRemoteDatasource {
  MockSearchRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.SearchModel>>> search(String? q) =>
      (super.noSuchMethod(Invocation.method(#search, [q]),
              returnValue:
                  Future<_i2.Either<Exception, List<_i5.SearchModel>>>.value(
                      _FakeEither_0<Exception, List<_i5.SearchModel>>()))
          as _i4.Future<_i2.Either<Exception, List<_i5.SearchModel>>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get getCurrentConnectionState =>
      (super.noSuchMethod(Invocation.getter(#getCurrentConnectionState),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
